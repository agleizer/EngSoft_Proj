@startuml
actor Contratante

boundary UI_PropostasRecebidas
control GerenciadorPropostas
entity Usuario
entity Pagamento
entity Agendamento
entity MeioPagamento
entity NotaFiscal
entity PedidoServico
control ServicoPagamento
actor InstituicaoFinanceira

control GerenciadorProfissional
boundary UI_ConfirmacaoDisponibilidade
actor Profissional

== Início do Fluxo ==
Contratante -> UI_PropostasRecebidas : acessarTelaPropostasRecebidas()
UI_PropostasRecebidas -> GerenciadorPropostas : iniciarConsultaPropostas()
GerenciadorPropostas -> Usuario : verificarAutenticacao()
Usuario --> GerenciadorPropostas : autenticacaoValida()

GerenciadorPropostas -> PedidoServico : buscarPropostasPendentes()
PedidoServico --> GerenciadorPropostas : retornarListaPropostas()
GerenciadorPropostas -> UI_PropostasRecebidas : exibirListaPropostas()

== Visualização de Detalhes ==
Contratante -> UI_PropostasRecebidas : selecionarProposta()
UI_PropostasRecebidas -> GerenciadorPropostas : solicitarDetalhesProposta()
GerenciadorPropostas -> PedidoServico : obterDetalhesProposta()
PedidoServico --> GerenciadorPropostas : retornarDetalhesProposta()
GerenciadorPropostas -> UI_PropostasRecebidas : exibirDetalhesProposta()

== Aceite da Proposta ==
Contratante -> UI_PropostasRecebidas : clicarAceitarProposta()
UI_PropostasRecebidas -> GerenciadorPropostas : solicitarAceiteProposta()
GerenciadorPropostas -> PedidoServico : verificarStatusProposta()
PedidoServico --> GerenciadorPropostas : retornarStatusProposta()

== Pagamento ==
GerenciadorPropostas -> MeioPagamento : coletarDadosPagamento()
GerenciadorPropostas -> ServicoPagamento : processarPagamento(valor, meio)
ServicoPagamento -> InstituicaoFinanceira : realizarTransacao()
InstituicaoFinanceira --> ServicoPagamento : confirmarPagamento()
ServicoPagamento --> GerenciadorPropostas : pagamentoConfirmado()

== Atualizações e Confirmações ==
GerenciadorPropostas -> PedidoServico : atualizarStatusParaAceitaEPaga()
PedidoServico -> Pagamento : registrarPagamento()
Pagamento -> NotaFiscal : gerarNotaFiscal()
PedidoServico -> Agendamento : criarAgendamento()
PedidoServico -> Profissional : enviarNotificacaoDisponibilidade()

== Profissional Confirma Disponibilidade ==
Profissional -> UI_ConfirmacaoDisponibilidade : acessarPropostaAceita()
UI_ConfirmacaoDisponibilidade -> GerenciadorProfissional : solicitarDetalhesPropostaAceita()
GerenciadorProfissional -> PedidoServico : obterDetalhesPropostaAceita()
PedidoServico --> GerenciadorProfissional : retornarDetalhesPropostaAceita()
UI_ConfirmacaoDisponibilidade -> GerenciadorProfissional : confirmarDisponibilidade()
GerenciadorProfissional -> PedidoServico : registrarConfirmacaoDisponibilidade()
PedidoServico -> Agendamento : atualizarStatusParaConfirmado()

== Confirmação Final ==
GerenciadorPropostas -> UI_PropostasRecebidas : exibirConfirmacaoAceite()
@enduml
